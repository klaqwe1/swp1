=========
(실습4) 준비
=========

첨부파일(lab4.zip) 안의 5개 파일(Order.java, JUnit1.java, JUnit2.java, JUnit3.java, JUnit4.java)을 복사하고,
이클립스에서 실습 프로젝트(lab4)를 생성한 후, 프로젝트 소스폴더(src) 안에 위의 5개 파일을 추가한 다음,
프로젝트(lab4) 아이콘위에 마우스를 올린 상태에서 마우스 오른쪽 버튼을 눌러 팝업창을 띄운 후,
중간 위치에 있는 <Build Path> 서브메뉴에 있는 <Add Libraries...>를 선택하여 나온 대화창에서,
"JUnit" 클릭  ->  "Next" 버튼 클릭  ->  "JUnit library version"에서 "JUnit4" 선택  ->  "Finish" 버튼 클릭함

  (*) "JUnit"는 자바 프로그램을 효율적으로 테스트하는데 사용되는 기능들을 가지고 있는 라이브러리 패키지임



=========
(실습4) 객체
=========

아래 조건에 맞게 클래스(Menu, Food, Juice, Order)를 구현 하세요.

특별한 언급이 없다면 접근 지정자는 public으로 설정 합니다.

--------------------------------------------------------------------------------------------------
#### Menu 클래스

__클래스__ 로 만들어 주세요.

__멤버변수__

아래와 같은 멤버변수를 가지며 접근 지정자는 protected로 설정 합니다.

* int 타입의 price

__생성자__

* Menu(int price) // 입력 받은 값으로 멤버변수 price를 초기화 합니다.
* Menu() //price를 0으로 초기화 합니다.

__멤버함수__

* getPrice() //멤버변수 price의 값을 리턴 합니다.
* setPrice(int price) //입력받은 값으로 멤버변수 price의 값을 변경 합니다.

--------------------------------------------------------------------------------------------------
#### Food 클래스

클래스 Menu를 상속 받습니다.

__멤버변수__

아래와 같은 멤버변수를 추가로 가지며, 접근 지정자는 private으로 설정 합니다.

* int 타입의 cookingTime

__생성자__

* Food(int price, int cookingTIme) // 입력받은 값으로 멤버변수 price, cookingTime을 초기화 합니다.
* Food() // price, cookingTime의 값을 모두 0으로 초기화 합니다.

__멤버함수__

* getCookingTime() //멤버변수 cookingTIme의 값을 리턴 합니다.
* setCookingTime(int cookingTIme) //입력받은 값으로 멤버변수 cookingTIme의 값을 변경 합니다.

--------------------------------------------------------------------------------------------------------------
#### Juice 클래스

클래스 Menu를 상속 받습니다.

__멤버변수__

아래와 같은 멤버변수를 추가로 가지며 접근 지정자는 private으로 설정 합니다.

* String 타입의 flavor

__생성자__

* Juice(int price, String flavor) // 입력받은 값으로 멤버변수 price, flavor를 초기화 해줍니다.
* Juice() // price는 0으로, flavor는 문자열 "오렌지" 로 초기화 해줍니다.

__멤버함수__

* getFlavor() // 멤버변수 flavor를 리턴 합니다.
* setFlavor(String flavor) // 멤버변수 flavor를 입력 받은 문자열 로 변경 합니다.

--------------------------------------------------------------------------------------------------------------------
#### Order 클래스 

__멤버변수__

* Menu[] 타입의 멤버변수 orderList 를 가집니다. 접근 지정자는 private으로 설정 해줍니다.

__생성자__

* Order(Menu[] orderList) // 멤버변수 orederList를 입력 받은 배열로 초기화 합니다.
* Order() // 멤버변수 orderList를 길이가 0인 배열로 초기화 합니다.

__멤버함수__

* bill() // orderList에 들어있는 모든 객체를 가지고 메소드 getPrice()를 호출 하여, 그 값을 모두 더하여 리턴 합니다.

* waitingTime() // orderList에 있는 Menu 객체들 중에서 Food 클래스 타입으로 다운캐스팅이 가능한 객체들만 가지고 
                        메소드 getCookingTime()을 호출 하여, 그 값들을 모두 더하여 리턴 합니다.
   (힌트) 5장 프리젠테이션 파일(pp.25-31)의 다운캐스팅(downcasting)과 연산자(instanceof)를 사용하여 orderList에 있는  
            임의의 객체가 Menu 객체이면서 동시에 Food 클래스 객체라면, Food 클래스 객체로 다운캐스팅하여
            메소드 getCookingTime() 호출 리턴 값들을 더한 합계를 리턴함.
